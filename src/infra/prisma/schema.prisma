// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_DATABASE_URL")
}

model Company {
  id                   Int     @id @default(autoincrement())
  name                 String
  email                String
  phone1               String
  phone2               String?
  plan                 String
  zapQrcode            String  @default("")
  whatsappSlots        Int     @default(1)
  whatsappFreeSlots    Int     @default(1)
  activeClientTreshold Int     @default(100)

  statusTrashed Boolean @default(false)

  clients    Client[]
  leads      Lead[]
  users      User[]
  tickets    Ticket[]
  procedures Procedure[]
  groups     Group[]
  lists      List[]
  events     Event[]
  tasks      Task[]
  quotes     Quote[]
  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Ticket {
  id              Int      @id @default(autoincrement())
  type            String
  creatorUserId   Int?
  assignedUserId  Int?
  permitedUserIds Int[]
  procedureNames  String[]
  proceduresData  Json?
  clientId        Int?
  clientName      String
  clientCPF       String?
  companyId       Int
  value           Float?
  salesCode       Int?
  salesmanName    String?
  pa              String?
  salesChannel    String?

  procedureTypeInjetavelCount Int    @default(0)
  procedureTypeCorporalCount  Int    @default(0)
  procedureTypeFacialCount    Int    @default(0)
  procedureTotalCount         Int    @default(0)
  procedureType               String @default("PADRﾃグ")

  returnDate    DateTime?
  assignedDate  DateTime?
  postponedDate DateTime?

  procedures                  Procedure[]
  proceduresAvailableToReturn Procedure[] @relation(name: "availableToReturn")
  client                      Client      @relation(fields: [clientName, companyId], references: [name, companyId])
  creatorUser                 User?       @relation(name: "creator", fields: [creatorUserId], references: [id])
  assignedUser                User?       @relation(name: "assignee", fields: [assignedUserId], references: [id])
  company                     Company     @relation(fields: [companyId], references: [id])

  trashedReason String @default("")

  statusPostponed            Boolean @default(false)
  statusAbsent               Boolean @default(false)
  statusDone                 Boolean @default(false)
  statusCanceled             Boolean @default(false)
  statusTrashed              Boolean @default(false)
  statusAvailableToReturn    Boolean @default(false)
  statusReturnAlreadyManaged Boolean @default(false)

  doneDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Lead {
  id                Int     @id @default(autoincrement())
  uuid              String? @default(uuid())
  companyId         Int
  creatorId         Int
  name              String
  CPF               String? @unique
  phone             String
  mail              String?  
  absences            Int   @default(0)

  leadAdIdentifer   String?
  leadStatus        String
  leadEvaluationDate DateTime?
  leadObservation    String?
  leadType           String
  leadRank           String  

  age           Int?
  neighborhood  String?
  adress        String?
  zipCode       String?
  houseNumber   Int?
  profession    String?
  birthday      DateTime?
  birthdayDay   Int?
  birthdayMonth Int?
  birthdayYear  Int?
  
  events          Event[]
  targetedThrows  Throw[]
  targetedTasks   Task[]
  assignedQuotes  Quote[]
  evaluations Evaluation[]
  creator         User     @relation(fields: [creatorId], references: [id])
  company         Company  @relation(fields: [companyId], references: [id])

  statusTrashed           Boolean @default(false)
  trashedReason           String  @default("")
  statusActive            Boolean @default(false)
  statusConverted         Boolean @default(false)

  javelynEntryDates DateTime[]
  flexusEntryDates  DateTime[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  trashedAt DateTime?

  @@unique([companyId, name, phone])
}

model Client {
  id                Int     @id @default(autoincrement())
  uuid              String? @default(uuid())
  companyId         Int
  responsibleUserId Int?
  name              String
  CPF               String? @unique
  phone             String?
  mail              String?
  rank              Int     @default(50)
  rankName          String?

  leadAdIdentifer   String?
  leadStatus        String?
  leadEvaluationDate DateTime?
  leadObservation    String?


  age           Int?
  neighborhood  String?
  adress        String?
  zipCode       String?
  houseNumber   Int?
  profession    String?
  birthday      DateTime?
  birthdayDay   Int?
  birthdayMonth Int?
  birthdayYear  Int?

  totalSpent          Float @default(0)
  canceledTickets     Int   @default(0)
  acomplishedTickets  Int   @default(0)
  absences            Int   @default(0)
  daysSinceLastTicket Int   @default(0)

  javelynContactAttemptsDates DateTime[]

  procedureTypeInjetavelCount Int    @default(0)
  procedureTypeCorporalCount  Int    @default(0)
  procedureTypeFacialCount    Int    @default(0)
  procedureTotalCount         Int    @default(0)
  procedureType               String @default("PADRﾃグ")

  tickets         Ticket[]
  groups          Group[]
  sentLists       List[]   @relation(name: "sent")
  pendingLists    List[]   @relation(name: "pending")
  responsibleUser User?    @relation(fields: [responsibleUserId], references: [id])
  events          Event[]
  targetedThrows  Throw[]
  targetedTasks   Task[]
  assignedQuotes  Quote[]
    evaluations Evaluation[]
  company         Company  @relation(fields: [companyId], references: [id])

  statusTrashed           Boolean @default(false)
  trashedReason           String  @default("")
  statusActive            Boolean @default(false)
  statusAvailableToReturn Boolean @default(false)

  javelynEntryDates DateTime[]
  flexusEntryDates  DateTime[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  trashedAt DateTime?

  @@unique([companyId, name])
}

model Procedure {
  id                      Int     @id @default(autoincrement())
  companyId               Int
  name                    String
  value                   Float?
  type                    String? @default("PADRﾃグ")
  category                String  @default("PADRﾃグ")
  recommendedReturnTime   Int?
  recommendedProcedureIds Int[]

  ticket                  Ticket[]
  ticketAvailableToReturn Ticket[] @relation(name: "availableToReturn")
  quotes                  Quote[]
  company                 Company  @relation(fields: [companyId], references: [id])

  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@unique([companyId, name])
}

model User {
  id         Int    @id @default(autoincrement())
  username   String @unique
  password   String
  name       String
  permission String
  companyId  Int
  zapQrcode  String @default("")

  company Company @relation(fields: [companyId], references: [id])

  createdTickets  Ticket[] @relation("creator")
  assignedTickets Ticket[] @relation("assignee")
  createdGroups   Group[]  @relation("creator" )
  assignedGroups Group[] @relation("assigned")
  createdLists    List[]
  throws          Throw[]
  clients         Client[]
  tasks           Task[]
  createdQuotes   Quote[]
  createdLead     Lead[]
  createdEvaluations Evaluation[]

  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Group {
  id              Int    @id @default(autoincrement())
  companyId       Int
  creatorId       Int
  name            String @default("")
  description     String @default("")
  color           String @default("linear-gradient(to right, MediumPurple, MediumSlateBlue)")
  colorClassNames String @default("bg-gradient-to-r from-[MediumPurple] to-[MediumSlateBlue]")
  filters         Json

  javelynThrows      Int        @default(0)
  javelynThrowsDates DateTime[]

  statusTrashed Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  trashedAt DateTime?

  clients Client[]
  company Company  @relation(fields: [companyId], references: [id])
  creator User     @relation(name:"creator",fields: [creatorId], references: [id])
  assignedUsers User[] @relation(name:"assigned")
}

model List {
  id              Int    @id @default(autoincrement())
  companyId       Int
  creatorId       Int
  name            String @default("")
  description     String @default("")
  color           String @default("linear-gradient(to right, MediumPurple, MediumSlateBlue)")
  colorClassNames String @default("bg-gradient-to-r from-[MediumPurple] to-[MediumSlateBlue]")
  filters         Json

  javelynThrowsDates DateTime[]

  statusTrashed Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  trashedAt DateTime?

  pendingClients Client[] @relation(name: "pending")
  sentClients    Client[] @relation(name: "sent")
  company        Company  @relation(fields: [companyId], references: [id])
  creator        User     @relation(fields: [creatorId], references: [id])
}

model Event {
  id        Int @id @default(autoincrement())
  companyId Int

  name      String?
  type      String
  date      DateTime
  dateDay   Int      @default(0)
  dateMonth Int      @default(0)
  dateYear  Int      @default(0)

  statusTrashed Boolean @default(false)
  statusHandled Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  handledAt DateTime?
  trashedAt DateTime?

  targets Client[]
  leadTargets Lead[]
  company Company  @relation(fields: [companyId], references: [id])
}

model Throw {
  id         Int    @id @default(autoincrement())
  companyId  Int
  targetsIds Int[]
  creatorId  Int
  body       String
  targets     Client[]
  leadTargets Lead[]
  creatorUser User     @relation(fields: [creatorId], references: [id])

  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model Task {
  id        Int    @id @default(autoincrement())
  companyId Int
  creatorId Int
  title     String
  body      String
  conclusion String @default("Nenhuma conclusﾃ｣o definida.")
  rating     Int     @default(5)
  category  String    @default("LEAD")

  targets     Client[]
  leadTargets Lead[]
  quotes      Quote[]
  creatorUser User     @relation(fields: [creatorId], references: [id])
  company     Company   @relation(fields: [companyId], references: [id])

  statusHandled Boolean  @default(false)
  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  targetDate    DateTime
  handledAtDate DateTime?
}

model Quote {
  id        Int    @id @default(autoincrement())
  companyId Int
  creatorId Int
  clientId  Int?
  leadId    Int?
  isClientQuote Boolean @default(true)
  isLeadQuote Boolean @default(false)

  quoteRank String @default("MEDIO")
  observation String?
  value Int @default(0)
  
  procedures Procedure[]
  tasks     Task[]
  proceduresData    Json
  company           Company  @relation(fields: [companyId],references: [id])
  creator           User   @relation(fields: [creatorId], references: [id])
  client            Client? @relation(fields: [clientId], references: [id])
  lead              Lead?   @relation(fields: [leadId], references: [id])

  targetDate    DateTime?
  handledAtDate DateTime?
  statusAbsent  Boolean  @default(false)
  statusAccomplished Boolean  @default(false)
  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Evaluation {
  id        Int    @id @default(autoincrement())
  companyId Int
  creatorId Int
  clientId  Int?
  leadId    Int?
  isClientEvaluation Boolean @default(true)
  isLeadEvaluation Boolean @default(false)

  evaluationPotential String
  observation String?
  duration Int @default(15)
  
  company           Company  @relation(fields: [companyId],references: [id])
  creator           User   @relation(fields: [creatorId], references: [id])
  client            Client? @relation(fields: [clientId], references: [id])
  lead              Lead?   @relation(fields: [leadId], references: [id])

  targetDate    DateTime?
  handledAtDate DateTime?
  statusAbsent  Boolean  @default(false)
  statusAccomplished Boolean  @default(false)
  statusTrashed Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

