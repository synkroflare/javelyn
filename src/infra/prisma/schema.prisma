// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_DATABASE_URL")
}

model Company {
  id    Int     @id @default(autoincrement())
  name String
  email String
  phone1 String
  phone2 String?
  plan String
  zapQrcode String @default("")

  statusTrashed Boolean @default(false)

  clients Client[]
  users User[]
  tickets Ticket[]
  procedures Procedure[]
  groups Group[]
  lists List[]
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Ticket {
  id    Int     @id @default(autoincrement())
  type String 
  creatorUserId Int?
  assignedUserId Int?
  permitedUserIds Int[]
  procedureNames String[]
  clientId Int?
  clientName String
  clientCPF BigInt?
  companyId Int
  value Float?
  salesCode Int?
  salesmanName String?
  pa String?
  salesChannel String?

  procedureTypeInjetavelCount Int @default(0)
  procedureTypeCorporalCount Int @default(0)
  procedureTypeFacialCount Int @default(0)
  procedureTotalCount Int @default(0)
  procedureType String @default("PADRÃO")

  returnDate DateTime? 
  assignedDate DateTime? 
  postponedDate DateTime?

  procedures Procedure[]  
  proceduresAvailableToReturn Procedure[] @relation(name: "availableToReturn")
  client Client @relation(fields: [clientName], references: [name])
  creatorUser User? @relation(name:"creator",fields: [creatorUserId], references: [id])  
  assignedUser User? @relation(name:"assignee",fields: [assignedUserId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  
  statusPostponed  Boolean @default(false)
  statusAbsent Boolean @default(false)
  statusDone Boolean @default(false)
  statusCanceled Boolean @default(false)
  statusTrashed Boolean @default(false)
  statusAvailableToReturn Boolean @default(false)
  statusReturnAlreadyManaged Boolean @default(false)

  doneDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Client {
  @@unique([id, name])
  id    Int     @id @default(autoincrement())
  uuid String? @default(uuid())
  companyId Int
  name String @unique
  CPF String? @unique
  phone String? @unique
  mail String?
  rank Int @default(50)
  
  age Int? 
  neighborhood String?
  adress String?
  zipCode Int?
  houseNumber Int?
  profession String?
  birthday DateTime?
  birthdayDay Int?  
  birthdayMonth Int?  
  birthdayYear Int?  

  totalSpent Float @default(0)
  canceledTickets Int @default(0)
  acomplishedTickets Int @default(0)
  absences Int @default(0)
  daysSinceLastTicket Int @default(0)

  javelynContactAttemptsDates DateTime[]
  
  procedureTypeInjetavelCount Int @default(0)
  procedureTypeCorporalCount Int @default(0)
  procedureTypeFacialCount Int @default(0)
  procedureTotalCount Int @default(0)
  procedureType String @default("PADRÃO")  
  
  tickets Ticket[]
  groups Group[] 
  sentLists List[]   @relation(name: "sent")
  pendingLists List[]   @relation(name: "pending")
  events Event[]
  targetedThrows Throw[]
  company Company @relation(fields: [companyId], references: [id])

  statusTrashed Boolean @default(false)
  statusActive Boolean @default(false) 
  statusAvailableToReturn  Boolean @default(false) 

  javelynEntryDates DateTime[] 
  flexusEntryDates DateTime[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  trashedAt DateTime?
}

model Procedure {
    id    Int     @id @default(autoincrement())
    companyId Int
    name String @unique
    value Float ?  
    type String?    @default("PADRÃO")
    recommendedReturnTime Int?
    recommendedProcedureIds Int[]

    ticket Ticket[]
    ticketAvailableToReturn Ticket[] @relation(name: "availableToReturn")
    company Company @relation(fields: [companyId], references: [id]) 

    statusTrashed Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    }

model User {
    id    Int     @id @default(autoincrement())
    username String @unique
    password String
    name String
    permission String
    companyId Int

    company Company @relation(fields: [companyId], references: [id])

    createdTickets Ticket[] @relation("creator")
    assignedTickets Ticket[] @relation("assignee")
    createdGroups Group[]
    createdLists List[]
    throws Throw[]

    statusTrashed Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Group {
  id Int @id @default(autoincrement())
  companyId Int
  creatorId Int
  name String @default("")
  description String @default("")
  color String @default("linear-gradient(to right, MediumPurple, MediumSlateBlue)")
  colorClassNames String @default("bg-gradient-to-r from-[MediumPurple] to-[MediumSlateBlue]")
  filters Json

  javelynThrows Int @default(0)
  javelynThrowsDates DateTime[]

  statusTrashed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  trashedAt DateTime?

  clients Client[]
  company Company @relation(fields: [companyId], references: [id])
  creator User @relation(fields: [creatorId], references: [id])
}

model List {
  id Int @id @default(autoincrement())
  companyId Int
  creatorId Int
  name String @default("")
  description String @default("")
  color String @default("linear-gradient(to right, MediumPurple, MediumSlateBlue)")
    colorClassNames String @default("bg-gradient-to-r from-[MediumPurple] to-[MediumSlateBlue]")
  filters Json

  javelynThrowsDates DateTime[]

  statusTrashed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  trashedAt DateTime?

  pendingClients Client[] @relation(name: "pending")
  sentClients Client[] @relation(name: "sent")
  company Company @relation(fields: [companyId], references: [id])
  creator User @relation(fields: [creatorId], references: [id])
}

model Event {
  id Int @id @default(autoincrement())
  companyId Int

  name String?
  type String 
  date DateTime
  dateDay Int  @default(0)
  dateMonth Int  @default(0)
  dateYear Int  @default(0)

  statusTrashed Boolean @default(false)
  statusHandled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  handledAt DateTime?
  trashedAt DateTime?

  targets Client[]
  company Company @relation(fields: [companyId], references: [id])
}

model Throw {
  id Int @id @default(autoincrement())
  companyId Int
  targetsIds Int[]
  creatorId Int
  body String

  targets Client[]
  creatorUser User @relation(fields: [creatorId], references: [id])

  statusTrashed Boolean @default(false)
  createdAt DateTime @default(now())
}
